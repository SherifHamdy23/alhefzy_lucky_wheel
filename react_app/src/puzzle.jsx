import React, { useState } from 'react';

export default function SlidingPuzzle() {
  const [tiles, setTiles] = useState([0, 1, 2, 3, 4, 5, 6, 7, 8]);
  const [emptyIndex, setEmptyIndex] = useState(8);
  const [moves, setMoves] = useState(0);
  const [won, setWon] = useState(false);

  const shufflePuzzle = () => {
    let shuffled = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    let empty = 8;
    
    for (let i = 0; i < 100; i++) {
      const validMoves = getValidMoves(empty);
      const randomMove = validMoves[Math.floor(Math.random() * validMoves.length)];
      [shuffled[empty], shuffled[randomMove]] = [shuffled[randomMove], shuffled[empty]];
      empty = randomMove;
    }
    
    setTiles(shuffled);
    setEmptyIndex(empty);
    setMoves(0);
    setWon(false);
  };

  const getValidMoves = (emptyPos) => {
    const row = Math.floor(emptyPos / 3);
    const col = emptyPos % 3;
    const moves = [];

    if (row > 0) moves.push(emptyPos - 3);
    if (row < 2) moves.push(emptyPos + 3);
    if (col > 0) moves.push(emptyPos - 1);
    if (col < 2) moves.push(emptyPos + 1);

    return moves;
  };

  const handleTileClick = (index) => {
    if (won) return;
    
    const validMoves = getValidMoves(emptyIndex);
    if (validMoves.includes(index)) {
      const newTiles = [...tiles];
      [newTiles[emptyIndex], newTiles[index]] = [newTiles[index], newTiles[emptyIndex]];
      
      setTiles(newTiles);
      setEmptyIndex(index);
      setMoves(moves + 1);
      
      const isWon = newTiles.every((tile, idx) => tile === idx);
      if (isWon) {
        setWon(true);
      }
    }
  };

  const getTileStyle = (tileValue) => {
    const row = Math.floor(tileValue / 3);
    const col = tileValue % 3;
    
    const svgData = `data:image/svg+xml,${encodeURIComponent(`<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="1080" height="1080">
<path d="M0 0 C356.4 0 712.8 0 1080 0 C1080 356.4 1080 712.8 1080 1080 C723.6 1080 367.2 1080 0 1080 C0 723.6 0 367.2 0 0 Z " fill="#FEFEFE" transform="translate(0,0)"/>
<path d="M0 0 C10.56 0 21.12 0 32 0 C32 30.69 32 61.38 32 93 C62.69 93 93.38 93 125 93 C124.67 108.18 124.34 123.36 124 139 C144.13 139 164.26 139 185 139 C185 134.71 185 130.42 185 126 C169.82 126 154.64 126 139 126 C139 99.6 139 73.2 139 46 C165.07 46 191.14 46 218 46 C218 76.36 218 106.72 218 138 C252.65 138 287.3 138 323 138 C323 134.04 323 130.08 323 126 C321.86216568 126.00222061 320.72433136 126.00444122 319.55201721 126.00672913 C308.85369251 126.02695933 298.15537166 126.04197155 287.4570322 126.05181217 C281.95629138 126.05704131 276.45556595 126.06413951 270.95483398 126.07543945 C265.6510344 126.08626725 260.34724965 126.0922766 255.04343987 126.09487724 C253.01514388 126.09673169 250.98684874 126.10035267 248.95855904 126.10573006 C246.12803486 126.11293906 243.29757282 126.113991 240.46704102 126.11352539 C239.19605812 126.1189183 239.19605812 126.1189183 237.8993988 126.12442017 C232.11405216 126.11405216 232.11405216 126.11405216 231 125 C231 114.44 231 103.88 231 93 C272.58 93 314.16 93 357 93 C357 119.07 357 145.14 357 172 C272.85 172.33 188.7 172.66 102 173 C102 179.27 102 185.54 102 192 C82.53 192 63.06 192 43 192 C43 197.28 43 202.56 43 208 C62.47 208 81.94 208 102 208 C102 241.99 102 275.98 102 311 C61.66561898 311.04030303 61.66561898 311.04030303 44.81835938 311.04882812 C33.16625531 311.05477154 21.51415846 311.06177437 9.86206055 311.07543945 C1.37750507 311.08538506 -7.10704458 311.09185313 -15.59160572 311.09408849 C-20.0869866 311.09539581 -24.58235081 311.09848298 -29.07772636 311.10573006 C-33.30391046 311.11248833 -37.53007093 311.11461736 -41.75625992 311.11310768 C-43.31195898 311.1133841 -44.86765879 311.11539036 -46.4233532 311.11920547 C-48.53811934 311.12413973 -50.65279487 311.1229993 -52.76756287 311.12025452 C-53.95391044 311.12117631 -55.14025801 311.1220981 -56.3625555 311.12304783 C-59 311 -59 311 -60 310 C-60.09536242 306.83387337 -60.12550636 303.68959372 -60.11352539 300.52319336 C-60.11374443 299.03067802 -60.11374443 299.03067802 -60.1139679 297.50801086 C-60.11326831 294.20193338 -60.10547379 290.89591146 -60.09765625 287.58984375 C-60.09579223 285.30440807 -60.09436825 283.01897199 -60.09336853 280.73353577 C-60.08954207 274.70501613 -60.0797107 268.67652041 -60.06866455 262.64801025 C-60.05845317 256.50167159 -60.0538715 250.35532907 -60.04882812 244.20898438 C-60.03808854 232.13931069 -60.02049071 220.06966107 -60 208 C-45.81 208 -31.62 208 -17 208 C-17 227.8 -17 247.6 -17 268 C8.08 268 33.16 268 59 268 C59 262.39 59 256.78 59 251 C39.53 251 20.06 251 0 251 C0 168.17 0 85.34 0 0 Z " fill="#040404" transform="translate(298,413)"/>
<path d="M0 0 C15.84 0 31.68 0 48 0 C48.02258379 40.74908594 48.04049738 81.49817023 48.05106533 122.24726116 C48.05231611 127.05278024 48.05361042 131.8582993 48.05493164 136.66381836 C48.05519395 137.62055278 48.05545626 138.57728719 48.05572652 139.56301356 C48.06008357 155.07553692 48.06797131 170.58805659 48.0771528 186.10057776 C48.08648837 202.0055069 48.0920554 217.91043409 48.09408849 233.81536585 C48.09546392 243.63778998 48.09981559 253.46020369 48.10791647 263.28262461 C48.11318273 270.00869485 48.11480457 276.73475966 48.11350138 283.46083181 C48.11285781 287.34744927 48.11387761 291.23404845 48.11920547 295.12066269 C48.12492609 299.32422328 48.12300127 303.52774443 48.12025452 307.73130798 C48.12316736 308.9734986 48.1260802 310.21568921 48.12908131 311.49552196 C48.12709026 312.6121996 48.12509921 313.72887723 48.12304783 314.87939358 C48.12342755 315.8510979 48.12380727 316.82280223 48.1241985 317.82395214 C48 320 48 320 47 321 C45.52216199 321.09784774 44.03966732 321.12631765 42.55859375 321.12698364 C41.59945068 321.12980347 40.64030762 321.13262329 39.65209961 321.13552856 C38.59128174 321.13350433 37.53046387 321.1314801 36.4375 321.12939453 C34.77182983 321.13202301 34.77182983 321.13202301 33.07250977 321.13470459 C29.38165754 321.13912572 25.69085276 321.13618419 22 321.1328125 C19.44791657 321.13348546 16.89583321 321.13445542 14.34375 321.13571167 C8.98697238 321.137189 3.63021195 321.13512756 -1.7265625 321.13037109 C-7.92783715 321.12492851 -14.12907893 321.12669118 -20.33035278 321.1321975 C-26.28534215 321.13727437 -32.24032127 321.13674707 -38.1953125 321.13381577 C-40.73437505 321.13314624 -43.27343842 321.13397582 -45.8125 321.13629532 C-49.35418964 321.1388203 -52.89581517 321.13498342 -56.4375 321.12939453 C-57.49831787 321.13141876 -58.55913574 321.13344299 -59.65209961 321.13552856 C-61.09081421 321.13129883 -61.09081421 321.13129883 -62.55859375 321.12698364 C-63.39704834 321.12660662 -64.23550293 321.12622959 -65.09936523 321.12584114 C-67 321 -67 321 -68 320 C-68.09571971 318.50716202 -68.12188227 317.00980345 -68.12025452 315.51390076 C-68.12162918 314.54489838 -68.12300385 313.575896 -68.12442017 312.57752991 C-68.12082489 311.50579025 -68.11722961 310.4340506 -68.11352539 309.32983398 C-68.11367142 308.20802734 -68.11381744 307.0862207 -68.1139679 305.93041992 C-68.1132682 302.20229189 -68.10547315 298.47421311 -68.09765625 294.74609375 C-68.09579227 292.16919482 -68.09436827 289.59229553 -68.09336853 287.01539612 C-68.08993342 280.91324885 -68.0820426 274.81112206 -68.07201904 268.70898253 C-68.06085689 261.7635075 -68.0553472 254.81803165 -68.05032361 247.87254989 C-68.03985996 233.58169007 -68.02206065 219.29084631 -68 205 C-51.69508017 203.98094251 -35.33673434 204 -19 204 C-19 226.44 -19 248.88 -19 272 C-12.73 272 -6.46 272 0 272 C0 182.24 0 92.48 0 0 Z " fill="#050505" transform="translate(684,426)"/>
<path d="M0 0 C15.84 0 31.68 0 48 0 C48 83.16 48 166.32 48 252 C32.16 252 16.32 252 0 252 C0 168.84 0 85.68 0 0 Z " fill="#040404" transform="translate(744,323)"/>
</svg>`)}`;
    
    return {
      backgroundImage: `url("${svgData}")`,
      backgroundPosition: `-${col * 130}px -${row * 130}px`,
      backgroundSize: '390px 390px',
    };
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 p-4">
      <h1 className="text-4xl font-bold text-white mb-6">Image Puzzle</h1>
      
      <div className="bg-white/10 backdrop-blur-md p-4 rounded-lg mb-4 border border-white/20">
        <p className="text-white text-xl mb-2">Moves: {moves}</p>
        <button
          onClick={shufflePuzzle}
          className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white px-6 py-2 rounded font-bold w-full transition-all"
        >
          Shuffle
        </button>
      </div>

      <div className="grid grid-cols-3 gap-1 bg-black p-2 rounded-lg shadow-2xl">
        {tiles.map((tile, index) => (
          <div
            key={index}
            onClick={() => handleTileClick(index)}
            className={`
              w-32 h-32 rounded
              ${tile === 8 ? 'bg-black opacity-30' : 'cursor-pointer hover:opacity-80'}
              transition-all
            `}
            style={tile === 8 ? {} : getTileStyle(tile)}
          />
        ))}
      </div>

      <p className="text-white/80 mt-4 text-center">
        Click tiles next to the empty space to move them
      </p>

      {won && (
        <div className="mt-6 bg-gradient-to-r from-green-400 to-emerald-500 text-white px-8 py-4 rounded-lg text-center animate-pulse shadow-2xl">
          <h2 className="text-3xl font-bold mb-2">ðŸŽ‰ YOU WIN! ðŸŽ‰</h2>
          <p className="text-xl">Completed in {moves} moves!</p>
        </div>
      )}
    </div>
  );
}
